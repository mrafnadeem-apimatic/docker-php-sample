<?php

declare(strict_types=1);

/*
 * OrdersLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace OrdersLib\Tests\Controllers;

use Core\TestCase\TestParam;
use OrdersLib\Controllers\OrdersController;
use OrdersLib\Exceptions;
use OrdersLib\Models;

class OrdersControllerTest extends BaseTestController
{
    /**
     * @var OrdersController OrdersController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getOrdersController();
    }

    public function testOrdersCreate()
    {
        // Parameters for the API call
        $body = TestParam::object(
            '{"intent":"CAPTURE","purchase_units":[{"reference_id":"d9f80740-38f0-11e8-b467-0ed' .
            '5f89f718b","amount":{"currency_code":"USD","value":"100.00"}}]}',
            Models\OrderRequest::class
        );
        $payPalRequestId =
            'PayPal-Request-Id';
        $payPalPartnerAttributionId =
            null;
        $payPalClientMetadataId =
            'PayPal-Client-Metadata-Id';
        $prefer = 'return=minimal';
        $payPalMockResponse = TestParam::object(
            '{"mock_application_codes":"DUPLICATE_INVOICE_ID"}',
            Models\PaypalMockResponseSchema::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->ordersCreate(
                $body,
                $payPalRequestId,
                $payPalPartnerAttributionId,
                $payPalClientMetadataId,
                $prefer,
                $payPalMockResponse
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testOrdersCreate1()
    {
        // Parameters for the API call
        $body = TestParam::object(
            '{"intent":"CAPTURE","purchase_units":[{"reference_id":"d9f80740-38f0-11e8-b467-0ed' .
            '5f89f718b","amount":{"currency_code":"USD","value":"100.00"}}]}',
            Models\OrderRequest::class
        );
        $payPalRequestId =
            'PayPal-Request-Id';
        $payPalPartnerAttributionId =
            null;
        $payPalClientMetadataId =
            'PayPal-Client-Metadata-Id';
        $prefer = 'return=minimal';
        $payPalMockResponse = TestParam::object(
            '{"mock_application_codes":"DUPLICATE_INVOICE_ID"}',
            Models\PaypalMockResponseSchema::class
        );

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->ordersCreate(
                $body,
                $payPalRequestId,
                $payPalPartnerAttributionId,
                $payPalClientMetadataId,
                $prefer,
                $payPalMockResponse
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(201)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }
}
